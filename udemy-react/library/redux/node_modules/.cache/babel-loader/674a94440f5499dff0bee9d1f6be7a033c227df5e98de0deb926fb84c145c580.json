{"ast":null,"code":"// import { createStore } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counter';\nimport authReducer from './auth';\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    auth: authReducer\n  }\n});\nexport const authActions = authSlice.actions;\nexport default store;\n\n/*\n  // * 리덕스를 쓸때 단점\n  // 액션 타입의 오타가 날 확률이 높다 (충돌할 경우도 있음)\n  // 데이터 양이 많을 수록 상태 객체도 커지게되서 코드가 길어지고, 파일이 커진다.\n  \n  const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n    if (action.type === 'increment') {\n      // *** 리덕스뿐만 아니라 상태를 변경할 때는 절대 원본 상태 객체를 직접 수정하면 안된다.\n      // 상태의 불변성을 유지하기 위해, 항상 새로운 객체를 생성하여 반환해야 한다.\n      // 이를 통해 상태 변경을 감지할 수 있고, 리렌더링을 최적화할 수 있다.\n      // 아래 코드처럼 기존 상태의 복사본을 만들고 필요한 부분만 변경한 후, 새로운 객체를 반환.\n      return {\n        ...state, // 기존 상태 객체의 모든 속성을 복사\n        counter: state.counter + 1, // counter 속성만 업데이트\n      // 위 두 로직이 아래처럼 명시적으로 지정하는것과 똑같은 내용(스프레드연산자를 써서 간결한게 장점)\n      };\n    }\n\n    if (action.type === 'increase') {\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter,\n      };\n    }\n\n    if (action.type === 'decrement') {\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter,\n      };\n    }\n\n    if (action.type === 'toggle') {\n      return {\n        showCounter: !state.showCounter,\n        counter: state.counter,\n      };\n    }\n\n    return state;\n  };\n\n  const store = createStore(counterReducer);\n\n  export default store;\n*/","map":{"version":3,"names":["configureStore","counterReducer","authReducer","store","reducer","counter","auth","authActions","authSlice","actions"],"sources":["/Users/donghanoh/Documents/react-study/udemy-react/basic-study/redux/src/store/index.js"],"sourcesContent":["// import { createStore } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from './counter';\nimport authReducer from './auth';\n\nconst store = configureStore({\n  reducer: { counter: counterReducer, auth: authReducer },\n});\n\n\nexport const authActions = authSlice.actions;\n\nexport default store;\n\n/*\n  // * 리덕스를 쓸때 단점\n  // 액션 타입의 오타가 날 확률이 높다 (충돌할 경우도 있음)\n  // 데이터 양이 많을 수록 상태 객체도 커지게되서 코드가 길어지고, 파일이 커진다.\n  \n  const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n    if (action.type === 'increment') {\n      // *** 리덕스뿐만 아니라 상태를 변경할 때는 절대 원본 상태 객체를 직접 수정하면 안된다.\n      // 상태의 불변성을 유지하기 위해, 항상 새로운 객체를 생성하여 반환해야 한다.\n      // 이를 통해 상태 변경을 감지할 수 있고, 리렌더링을 최적화할 수 있다.\n      // 아래 코드처럼 기존 상태의 복사본을 만들고 필요한 부분만 변경한 후, 새로운 객체를 반환.\n      return {\n        ...state, // 기존 상태 객체의 모든 속성을 복사\n        counter: state.counter + 1, // counter 속성만 업데이트\n      // 위 두 로직이 아래처럼 명시적으로 지정하는것과 똑같은 내용(스프레드연산자를 써서 간결한게 장점)\n      };\n    }\n\n    if (action.type === 'increase') {\n      return {\n        counter: state.counter + action.amount,\n        showCounter: state.showCounter,\n      };\n    }\n\n    if (action.type === 'decrement') {\n      return {\n        counter: state.counter - 1,\n        showCounter: state.showCounter,\n      };\n    }\n\n    if (action.type === 'toggle') {\n      return {\n        showCounter: !state.showCounter,\n        counter: state.counter,\n      };\n    }\n\n    return state;\n  };\n\n  const store = createStore(counterReducer);\n\n  export default store;\n*/\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,cAAc,MAAM,WAAW;AACtC,OAAOC,WAAW,MAAM,QAAQ;AAEhC,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC3BI,OAAO,EAAE;IAAEC,OAAO,EAAEJ,cAAc;IAAEK,IAAI,EAAEJ;EAAY;AACxD,CAAC,CAAC;AAGF,OAAO,MAAMK,WAAW,GAAGC,SAAS,CAACC,OAAO;AAE5C,eAAeN,KAAK;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}